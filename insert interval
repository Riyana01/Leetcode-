/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as *returnColumnSizes array.
 * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().
 */

// Function to insert a new interval into a sorted list of non-overlapping intervals
// and return the merged intervals.
int** insert(int** intervals, int intervalsSize, int* intervalsColSize,
             int* newInterval, int newIntervalSize, int* returnSize, int** returnColumnSizes) {

    // Allocate memory for the result array (`ans`) to hold merged intervals.
    // We allocate space for one extra interval to accommodate the new interval.
    int** ans = (int**)malloc((intervalsSize + 1) * sizeof(int*));
    *returnColumnSizes = (int*)malloc((intervalsSize + 1) * sizeof(int));

    // Initialize the return size to 0, indicating no intervals added yet.
    *returnSize = 0;

    // Iterate through the existing intervals.
    for (int i = 0; i < intervalsSize; ++i) {
        int lo = intervals[i][0]; // Lower bound of the current interval.
        int hi = intervals[i][1]; // Upper bound of the current interval.

        // Case 1: The new interval ends before the current interval starts.
        // No overlap, so add the new interval first and update `newInterval`
        // to point to the current interval.
        if (newInterval[1] < lo) {
            pushinterval(ans, returnSize, returnColumnSizes, newInterval[0], newInterval[1]);
            newInterval = intervals[i];
        } else if (newInterval[0] > hi) {
            // Case 2: The new interval starts after the current interval ends.
            // No overlap, so add the current interval and continue iterating.
            pushinterval(ans, returnSize, returnColumnSizes, lo, hi);
        } else {
            // Case 3: There is overlap between the new interval and the current interval.
            // Update `newInterval` to represent the merged interval.
            if (lo < newInterval[0]) {
                newInterval[0] = lo; // Adjust the lower bound of the merged interval.
            }
            if (hi > newInterval[1]) {
                newInterval[1] = hi; // Adjust the upper bound of the merged interval.
            }
        }
    }

    // After iterating through existing intervals, add the final merged new interval.
    pushinterval(ans, returnSize, returnColumnSizes, newInterval[0], newInterval[1]);

    return ans;
}

// Helper function to push an interval (lo, hi) into the result array (`ans`).
void pushinterval(int** ans, int* retsize, int** retcolsizes, int lo, int hi) {
    ans[*retsize] = malloc(2 * sizeof(int)); // Allocate memory for a new interval.
    ans[*retsize][0] = lo;
    ans[*retsize][1] = hi;
    *((*retcolsizes) + *retsize) = 2; // Set the column size for the added interval.
    *retsize = *retsize + 1; // Increment the return size.
}
